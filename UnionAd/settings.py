"""
Django settings for UnionAd project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

from kombu import Queue, Exchange

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) #把apps路径插到系统目录的第0个位置，使其首先被搜索
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'eegq@dih#7emo0x-&bx=g(tx4dcwf%g)8e^r--=4ekqs$f)mty'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240 # 设置post表单的最大文件大小（m）

ALLOWED_HOSTS=['127.0.0.1'] #允许本地访问
# ALLOWED_HOSTS = [
#     'preview.streaming.media.platform.nisure.net',
#     '127.0.0.1',
#     'service.monadvert.com'
# ]


# **********************自定义用户认证***************************
AUTH_USER_MODEL = 'users.UserProfile'
AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
)


# **********************Application definition***********************
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'djcelery',
    'designad',
    'costtrendreport',
    'costreport',
    'collectiondata',
    'xadmin',
    'crispy_forms',
    'captcha',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'UnionAd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'UnionAd.wsgi.application'


# **********************Database设置*****************************
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'UnionAd',
        'USER': 'root',
        'PASSWORD': '123456',
        # 'HOST': 'ad_mysql',
        'HOST': '127.0.0.1',
        'PORT': 3306,

        # 取消外键检查
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
        }
    }
}


# **********************缓存设置***************************
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        # "LOCATION": "redis://ad_redis:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": "123456"
        }
    }
}
REDIS_TIMEOUT = 7*24*60*60
DAY_REDIS_TIMEOUT = 24*60*60
CUBES_REDIS_TIMEOUT = 60*60
NEVER_REDIS_TIMEOUT = 365*24*60*60


# **********************Password validation***************************
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# **********************Internationalization（国际化配置）***************************
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False #True则存储数据库的时间为UTC国际时间


# **********************验证码***************************
# 验证码格式
CAPTCHA_OUTPUT_FORMAT = u'%(text_field)s %(hidden_field)s %(image)s'
# 噪点样式
CAPTCHA_NOISE_FUNCTIONS = (
    # 'captcha.helpers.noise_null', # 没有样式
    # 'captcha.helpers.noise_arcs', # 线
    'captcha.helpers.noise_dots', # 点
)
CAPTCHA_LENGTH = 4 # 字符个数
CAPTCHA_TIMEOUT = 1 # 超时(minutes)

# 图片大小
CAPTCHA_IMAGE_SIZE = (92, 30)
CAPTCHA_BACKGROUND_COLOR = '#ffffff'
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge' # 图片中的文字为随机英文字母，如 mdsh
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'    # 图片中的文字为数字表达式，如1+2=</span>


# **********************session***************************
SESSION_COOKIE_AGE = 3600  # 60分钟
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# **********************上传文件设置***************************
# 设置我们上传文件的路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# **********************静态文件***************************
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
# 默认 设置静态页面样式、js文件路径
STATIC_URL = '/static/'
# 项目根目录下的static文件夹
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

TEMPLATE_DIRS = (os.path.join(BASE_DIR,  'templates'),)


# **********************邮件设置***************************
# EMAIL_HOST = 'smtp.sina.cn'                   #SMTP地址
# EMAIL_PORT = 25                                 #SMTP端口
# EMAIL_HOST_USER = '18819470249@sina.cn'       #我自己的邮箱
# EMAIL_HOST_PASSWORD = 'cwd1314suiyuan'                  #你自己的邮箱密码
# EMAIL_SUBJECT_PREFIX = '[password_reset]'            #为邮件Subject-line前缀,默认是'[django]'
# EMAIL_USE_TLS = True


# **********************celery设置***************************
# celery中间人 redis://redis服务器所在的ip地址:端口/数据库
BROKER_URL = 'redis://:123456@127.0.0.1:6379/1'
# BROKER_URL = 'redis://:123456@ad_redis:6379/1'
# celery结果返回，可用于跟踪结果
CELERY_RESULT_BAKEND = 'redis://:123456@127.0.0.1:6379/2'
# CELERY_RESULT_BAKEND = 'redis://:123456@ad_redis:6379/2'
# celery内容等消息的格式设置
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# celery时区设置，使用settings中TIME_ZONE同样的时区
CELERY_TIMEZONE = TIME_ZONE
# 配置多队列异步任务
CELERY_QUEUES = (
    Queue("default", Exchange("default"), routing_key="default"),
    Queue("for_task_postOrUpdateAdData", Exchange("for_task_postOrUpdateAdData"), routing_key="task_postOrUpdateAdData"),
    Queue("for_task_postOrUpdateSites", Exchange("for_task_postOrUpdateSites"), routing_key="task_postOrUpdateSites"),
    Queue("for_task_updateSitesDataRate", Exchange("for_task_updateSitesDataRate"), routing_key="task_updateSitesDataRate"),
)

CELERY_ROUTES = {
    # 上传广告活动
    'users.tasks.postOrUpdateAdData': {"queue": "for_task_postOrUpdateAdData", "routing_key": "task_postOrUpdateAdData"},
    # 上传站点
    'users.tasks.postOrUpdateSites': {"queue": "for_task_postOrUpdateSites", "routing_key":"task_postOrUpdateSites"},
    # 更改了汇率和投放率后需要更新广告活动
    'users.tasks.updateSitesDataRate': {"queue": "for_task_updateSitesDataRate", "routing_key":"task_updateSitesDataRate"},
}


# 配置定时任务
CELERYBEAT_SCHEDULE={
    # 'getCamp_task': {
    #     'task': 'users.tasks.getCamp',  # tasks.py模块下的getCamp方法，获取广告活动数据
    #     'schedule': timedelta(seconds=120),      # 每隔2分钟运行一次
    #     # 'args': (23, 12),
    # },
    # 'getAdData_task': {
    #     'task': 'users.tasks.getAdData',  # tasks.py模块下的getAdData方法，获取用户广告日报表消费数据
    #     'schedule': timedelta(seconds=150),      # 每隔2.5分钟运行一次
    #     # 'args': (23, 12),
    # },
    # 'getAdHourData_task': {
    #     'task': 'users.tasks.getAdHourData',  # tasks.py模块下的getAdHourData方法，获取用户广告分时消费数据
    #     'schedule': timedelta(seconds=155),      # 每隔2.5分钟运行一次
    #     # 'args': (23, 12),
    # },
    # 'getToken_task': {
    #     'task': 'users.tasks.getToken',  # tasks.py模块下的getToken方法，获取用户Token
    #     'schedule': timedelta(seconds=1800),      # 每隔30分钟运行一次
    #     # 'args': (12, 14),
    # },
    # 'getVariStatus_task': {
    #     'task': 'users.tasks.getVariStatus',  # tasks.py模块下的getVariStatus方法，获取广告内容状态数据
    #     'schedule': timedelta(seconds=165),      # 每隔2分钟运行一次
    #     # 'args': (12, 14),
    # },
    'getUserAcount_task': {
        'task': 'users.tasks.getUserAcount',  # tasks.py模块下的getUserAcount方法，获取用户余额数据
        'schedule': timedelta(seconds=10),      # 每隔2分钟运行一次
        # 'args': (12, 14),
    },
    # 'getGoals_task': {
    #     'task': 'users.tasks.getGoals',  # tasks.py模块下的getGoals方法
    #     'schedule': timedelta(seconds=1800),      # 每隔60秒运行一次
    #     # 'args': (12, 14),
    # },
    # 'getSitesData_task': {
    #     'task': 'users.tasks.getSitesData',  # tasks.py模块下的getSitesData方法，获取站点数据
    #     'schedule': timedelta(seconds=240),      # 每隔4分钟运行一次
    #     # 'args': (12, 14),
    # },
    # 'checkAdIsPost_task': {
    #     'task': 'users.tasks.checkAdIsPost',  # tasks.py模块下的checkAdIsPost方法，检查并上传未成功上传的广告
    #     'schedule': timedelta(seconds=200),      # 每隔3分钟运行一次
    #     # 'args': (12, 14),
    # },
    # 'checkUserToken_task': {
    #     'task': 'users.tasks.checkUserToken',  # tasks.py模块下的checkUserToken方法，检查用户Token是否过期
    #     'schedule': timedelta(seconds=190),      # 每隔3分钟运行一次
    #     # 'args': (12, 14),
    # },

}
